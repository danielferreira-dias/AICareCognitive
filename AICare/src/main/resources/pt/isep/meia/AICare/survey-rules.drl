package pt.isep.meia.AICare;

import pt.isep.meia.AICare.application.utils.DroolsHelper;
import pt.isep.meia.AICare.domain.constants.AnswerConstants;
import pt.isep.meia.AICare.domain.constants.ActivityConstants;
import pt.isep.meia.AICare.domain.constants.EvidenceConstants;
import pt.isep.meia.AICare.domain.model.Evidence;
import pt.isep.meia.AICare.domain.model.Hypothesis;
import pt.isep.meia.AICare.domain.model.Justification;
import pt.isep.meia.AICare.domain.model.Restrict
import pt.isep.meia.AICare.domain.model.PreferredActivity;
import pt.isep.meia.AICare.domain.model.SurveyCompleted;
import pt.isep.meia.AICare.domain.entities.Conclusion;
import pt.isep.meia.AICare.domain.entities.Question
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

global List<Evidence> evidences;
global List<Restrict> restrictions;

rule "Alzheimer Initial Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER_STAGE, AnswerConstants.INITIAL))
    then
        Hypothesis h = new Hypothesis("disease", "alzheimer_initial");
        insert(h);
end

// Alzheimer's Initial Stage Rule 2 - Symptom Count Matching
rule "Alzheimer Initial Stage - Symptom Count"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_ALZHEIMER_SPATIAL_DISORIENTATION,
                EvidenceConstants.OBSERVATION_ALZHEIMER_MEMORY_LOSS_FRUSTRATION,
                EvidenceConstants.OBSERVATION_ALZHEIMER_SLIGHT_MEMORY_LOSS
            )) >= 2)
    then
        Hypothesis h = new Hypothesis("disease", "alzheimer_initial");
        insert(h);
end

// Alzheimer's Advanced Stage Rule 1 - Direct Evidence Matching
rule "Alzheimer Advanced Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER_STAGE, AnswerConstants.ADVANCED))
    then
        Hypothesis h = new Hypothesis("disease", "alzheimer_advanced");
        insert(h);
end

// Alzheimer's Advanced Stage Rule 2 - Condition + Symptom Count Matching
rule "Alzheimer Advanced Stage - Condition Symptom Count"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_ALZHEIMER_STARE,
                EvidenceConstants.OBSERVATION_ALZHEIMER_NEEDS_CONSTANT_SUPERVISION,
                EvidenceConstants.OBSERVATION_ALZHEIMER_UNABLE_TO_FOLLOW_STIMULI,
                EvidenceConstants.OBSERVATION_ALZHEIMER_HISTORY_OF_FALLS
            )) >= 1)
    then
        Hypothesis h = new Hypothesis("disease", "alzheimer_advanced");
        insert(h);
end

// Parkinson Initial Stage Rule 1 - Direct Evidence Matching
rule "Parkinson Initial Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON_STAGE, AnswerConstants.INITIAL))
    then
        Hypothesis h = new Hypothesis("disease", "parkinson_initial");
        insert(h);
end

// Parkinson Initial Stage Rule 2 - Symptom Count Matching
rule "Parkinson Initial Stage - Symptom Count"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_PARKINSON_SHAKING,
                EvidenceConstants.OBSERVATION_PARKINSON_BENT_SPINE,
                EvidenceConstants.OBSERVATION_PARKINSON_BALANCE_LOSS,
                EvidenceConstants.OBSERVATION_HEARING_LOSS_ONSET
            )) >= 2)
    then
        Hypothesis h = new Hypothesis("disease", "parkinson_initial");
        insert(h);
end

// Parkinson Advanced Stage Rule 1 - Direct Evidence Matching
rule "Parkinson Advanced Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON_STAGE, AnswerConstants.ADVANCED))
    then
        Hypothesis h = new Hypothesis("disease", "parkinson_advanced");
        insert(h);
end

// Parkinson Advanced Stage Rule 2 - Condition + Symptom Count Matching
rule "Parkinson Advanced Stage - Condition Symptom Count"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "parkinson_initial")
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_PARKINSON_LOCOMOTION_DIFFICULTIES,
                EvidenceConstants.OBSERVATION_PARKINSON_INTENSE_TREMORS,
                EvidenceConstants.OBSERVATION_PARKINSON_FINE_MOTOR_CONTROL
            )) >= 1)
    then
        Hypothesis h = new Hypothesis("disease", "parkinson_advanced");
        insert(h);
end

// Vascular Dementia Initial Stage Rule 1 - Direct Evidence Matching
rule "Vascular Dementia Initial Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA_STAGE, AnswerConstants.INITIAL))
    then
        Hypothesis h = new Hypothesis("disease", "vascular_dementia_initial");
        insert(h);
end

// Vascular Dementia Initial Stage Rule 2 - Symptom Count Matching
rule "Vascular Dementia Initial Stage - Symptom Count"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_SLIGHT_MEMORY_LOSS,
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_DEPRESSION_ANXIETY,
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_THINKING_PROBLEMS
            )) >= 2)
    then
        Hypothesis h = new Hypothesis("disease", "vascular_dementia_initial");
        insert(h);
end

// Vascular Dementia Advanced Stage Rule 1 - Direct Evidence Matching
rule "Vascular Dementia Advanced Stage - Diagnosis Evidence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA, AnswerConstants.YES))
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA_STAGE, AnswerConstants.ADVANCED))
    then
        Hypothesis h = new Hypothesis("disease", "vascular_dementia_advanced");
        insert(h);
end

// Vascular Dementia Advanced Stage Rule 2 - Condition + Symptom Count Matching
rule "Vascular Dementia Advanced Stage - Condition Symptom Count"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
        eval(DroolsHelper.getSymptomCount(evidences,
            Arrays.asList(
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MEMORY_RECALL_DIFFICULTIES,
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_PEOPLE_RECOGNITION,
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_AGGRESSIVENESS_INSOMNIA_AGITATION,
                EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MOTOR_PROBLEMS
            )) >= 1)
    then
        Hypothesis h = new Hypothesis("disease", "vascular_dementia_advanced");
        insert(h);
end

// Vascular Dementia Initial - Restricted Activities
rule "Restrict Activities for Vascular Dementia Initial"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.MEMORY_EXERCISES, "disease.vascular_dementia_initial"));
        insert(new Restrict(ruleName, ActivityConstants.TEMPORAL_ORIENTATION_EXERCISE, "disease.vascular_dementia_initial"));
end

// Vascular Dementia Advanced - Restricted Activities
rule "Restrict Activities for Vascular Dementia Advanced"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_advanced")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.MEMORY_EXERCISES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.TEMPORAL_ORIENTATION_EXERCISE, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.SPATIAL_RECOGNITION_EXERCISES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "disease.vascular_dementia_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "disease.vascular_dementia_advanced"));
end

// Alzheimer Initial - Restricted Activities
rule "Restrict Activities for Alzheimer Initial"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "disease.alzheimer_initial"));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "disease.alzheimer_initial"));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "disease.alzheimer_initial"));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "disease.alzheimer_initial"));
end

// Alzheimer Advanced - Restricted Activities
rule "Restrict Activities for Alzheimer Advanced"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "alzheimer_advanced")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.RECYCLED_MATERIALS, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.ODOR_DIFFERENTIATION, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "disease.alzheimer_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MEMORY_EXERCISES, "disease.alzheimer_advanced"));
end

// Parkinson Initial - Restricted Activities
rule "Restrict Activities for Parkinson Initial"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "parkinson_initial")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "disease.parkinson_initial"));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "disease.parkinson_initial"));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "disease.parkinson_initial"));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "disease.parkinson_initial"));
end

// Parkinson Advanced - Restricted Activities
rule "Restrict Activities for Parkinson Advanced"
    agenda-group "survey-rules"
    when
        Hypothesis(description == "disease", value == "parkinson_advanced")
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MEMORY_EXERCISES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.WALKING, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "disease.parkinson_advanced"));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "disease.parkinson_advanced"));
end

// Social Integration - Severe Integration Issues
rule "Restrict Activities for Severe Integration Issues"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SOCIAL_INTEGRATION, AnswerConstants.SEVERE_INTEGRATION_ISSUES))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.IMAGE_RECOGNITION_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.SEVERE_INTEGRATION_ISSUES));
end

// Social Integration - Isolated Person
rule "Restrict Activities for Isolated Person"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SOCIAL_INTEGRATION, AnswerConstants.ISOLATED_PERSON))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.IMAGE_RECOGNITION_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.MASSAGES, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.MAKEUP, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.SOCIAL_INTEGRATION + "." + AnswerConstants.ISOLATED_PERSON));
end

// Vision - Vision Difficulties
rule "Restrict Activities for Vision Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.VISION, AnswerConstants.VISION_WITH_DIFFICULTIES))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.IMAGE_RECOGNITION_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.VISION_WITH_DIFFICULTIES));
end

// Vision - Blindness
rule "Restrict Activities for Blindness"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.VISION, AnswerConstants.BLINDNESS))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.RECYCLED_MATERIALS, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.IMAGE_RECOGNITION_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.WALKING, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.VISION + "." + AnswerConstants.BLINDNESS));
end

// Hearing - Hearing Difficulties
rule "Restrict Activities for Hearing Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.HEARING, AnswerConstants.HEARING_WITH_DIFFICULTIES))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.ANIMAL_VOICES_RECOGNITION, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.HEARING_WITH_DIFFICULTIES));
end

// Hearing - Deafness
rule "Restrict Activities for Deafness"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.HEARING, AnswerConstants.DEAFNESS))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.ANIMAL_VOICES_RECOGNITION, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.HEARING + "." + AnswerConstants.DEAFNESS));
end

// Speech - Expresses with Difficulty
rule "Restrict Activities for Speech Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SPEECH, AnswerConstants.SPEAKS_WITH_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.SPEAKS_WITH_DIFFICULTY));
end

// Speech - Cannot be Understood
rule "Restrict Activities for Speech Cannot be Understood"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SPEECH, AnswerConstants.CANNOT_BE_UNDERSTOOD))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
        insert(new Restrict(ruleName, ActivityConstants.KARAOKE, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
        insert(new Restrict(ruleName, ActivityConstants.GUESS_THE_SONG, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.SPEECH + "." + AnswerConstants.CANNOT_BE_UNDERSTOOD));
end

// Smell - Loss of Smell
rule "Restrict Activities for Difficulties Smelling"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SMELL, AnswerConstants.SMELL_WITH_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.ODOR_DIFFERENTIATION, "conditions." + EvidenceConstants.SMELL + "." + AnswerConstants.SMELL_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.TASTE_REACTION, "conditions." + EvidenceConstants.SMELL + "." + AnswerConstants.SMELL_WITH_DIFFICULTY));
end

// Smell - Complete Loss of Smell
rule "Restrict Activities for Smell Complete Loss"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SMELL, AnswerConstants.NO_SENSE_OF_SMELL))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.ODOR_DIFFERENTIATION, "conditions." + EvidenceConstants.SMELL + "." + AnswerConstants.NO_SENSE_OF_SMELL));
        insert(new Restrict(ruleName, ActivityConstants.TASTE_REACTION, "conditions." + EvidenceConstants.SMELL + "." + AnswerConstants.NO_SENSE_OF_SMELL));
end

// Upper Motor Skills - UMS Has Difficulty
rule "Restrict Activities for Upper Motor Skills Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.UPPER_MOTOR_SKILLS, AnswerConstants.UMS_HAS_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.RECYCLED_MATERIALS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MANICURE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MAKEUP, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UMS_HAS_DIFFICULTY));
end

// Upper Motor Skills - Unable to use Upper Limbs
rule "Restrict Activities for Upper Motor Skills impossibility of movement"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.UPPER_MOTOR_SKILLS, AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.RECYCLED_MATERIALS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.DIFFERENCES_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PHYSIOTHERAPY, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MANICURE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MAKEUP, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.WARMUP_EXERCISES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
end

// Lower Motor Skills - LMS Has Difficulty
rule "Restrict Activities for Lower Motor Skills Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.LOWER_MOTOR_SKILLS, AnswerConstants.LMS_HAS_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PHYSIOTHERAPY, "conditions." + EvidenceConstants.UPPER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS));
end

// Lower Motor Skills - LMS Has Difficulty
rule "Restrict Activities for Lower Motor Skills impossibility of movement"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.LOWER_MOTOR_SKILLS, AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.WALKING, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.WARMUP_EXERCISES, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PHYSIOTHERAPY, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.LOWER_MOTOR_SKILLS + "." + AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS));
end

// Object Handling - Partial Control
rule "Restrict Activities for Object Partial Control"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.OBJECT_HANDLING, AnswerConstants.PARTIAL_CONTROL))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.MANICURE, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.MAKEUP, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.PARTIAL_CONTROL));
end

// Object Handling - Cannot Handle
rule "Restrict Activities for Object Handling Impairment"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.OBJECT_HANDLING, AnswerConstants.CANNOT_HANDLE))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.CONSTRUCTION_TECHNIQUE, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.RECYCLED_MATERIALS, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.EXECUTION_FESTIVAL_WORK, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.FELT_WORK, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.SMALL_ARRANGEMENTS, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.PAINTINGS, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.CENTRE_DECORATION_WORK, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.DESSERT_MAKING, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.KNOWLEDGE_EXERCISES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.MANUAL_DEXTERITY_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.MANICURE, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.MAKEUP, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.INSTRUMENTS_USE, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.DOMINO_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.MISSAKO_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.TIC_TAC_TOE_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.OBJECT_HANDLING + "." + AnswerConstants.CANNOT_HANDLE));
end

// Reading - Reading Difficulty
rule "Restrict Activities for Reading Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.READING_CONDITION, AnswerConstants.READING_WITH_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.READING_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.READING_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.READING_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.READING_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.NUMERICAL_COMPREHENSION_EXERCISES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.READING_WITH_DIFFICULTY));
end

// Reading - Cannot Read
rule "Restrict Activities for Reading Incapacity"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.READING_CONDITION, AnswerConstants.CANNOT_READ))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.NUMERICAL_COMPREHENSION_EXERCISES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.DRAMATIC_TEXT_READING, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.KNOWLEDGE_EXERCISES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.READING_CONDITION + "." + AnswerConstants.CANNOT_READ));
end

// Writing - Writing Difficulty
rule "Restrict Activities for Writing Difficulties"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.WRITING, AnswerConstants.WRITES_WITH_DIFFICULTY))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.WRITES_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.WRITES_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.WRITES_WITH_DIFFICULTY));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.WRITES_WITH_DIFFICULTY));
end

// Writing - Cannot Write
rule "Restrict Activities for Writing Incapacity"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.WRITING, AnswerConstants.CANNOT_WRITE))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.READING_WRITING_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.VERBAL_TASK_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.CHARACTER_INTERPRETATION, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.MUSICOGRAM, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.BINGO_GAMES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.KNOWLEDGE_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
        insert(new Restrict(ruleName, ActivityConstants.NUMERICAL_COMPREHENSION_EXERCISES, "conditions." + EvidenceConstants.WRITING + "." + AnswerConstants.CANNOT_WRITE));
end

// Mobility - Needs Assistance
rule "Restrict Activities for Mobility Needs Assistance"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.MOBILITY, AnswerConstants.NEEDS_ASSISTANCE))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.NEEDS_ASSISTANCE));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.NEEDS_ASSISTANCE));
        insert(new Restrict(ruleName, ActivityConstants.WARMUP_EXERCISES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.NEEDS_ASSISTANCE));
        insert(new Restrict(ruleName, ActivityConstants.PHYSIOTHERAPY, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.NEEDS_ASSISTANCE));
end

// Mobility - Total Dependence
rule "Restrict Activities for Mobility Total Dependence"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.MOBILITY, AnswerConstants.TOTAL_DEPENDENCE))
    then
        String ruleName = drools.getRule().getName();
        insert(new Restrict(ruleName, ActivityConstants.WALKING, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.WARMUP_EXERCISES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.PHYSIOTHERAPY, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.PETANQUE_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.BOWLING_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
        insert(new Restrict(ruleName, ActivityConstants.MIME_GAMES, "conditions." + EvidenceConstants.MOBILITY + "." + AnswerConstants.TOTAL_DEPENDENCE));
end

// Preference - Theatre
rule "Prefer Activities for Theatre Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.THEATRE, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.DRAMATIC_TEXT_READING));
        insert(new PreferredActivity(ActivityConstants.CHARACTER_INTERPRETATION));
        insert(new PreferredActivity(ActivityConstants.MIME_GAMES));
        insert(new PreferredActivity(ActivityConstants.MAKEUP));
end

// Preference - Museum
rule "Prefer Activities for Museum Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.MUSEUM, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.PAINTINGS));
        insert(new PreferredActivity(ActivityConstants.SMALL_ARRANGEMENTS));
        insert(new PreferredActivity(ActivityConstants.WALKING));
end

// Preference - Music
rule "Prefer Activities for Music Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.MUSIC, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.KARAOKE));
        insert(new PreferredActivity(ActivityConstants.MUSICOGRAM));
        insert(new PreferredActivity(ActivityConstants.GUESS_THE_SONG));
        insert(new PreferredActivity(ActivityConstants.INSTRUMENTS_USE));
end

// Preference - Reading
rule "Prefer Activities for Reading Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.READING_PREFERENCE, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.DRAMATIC_TEXT_READING));
        insert(new PreferredActivity(ActivityConstants.READING_WRITING_EXERCISES));
        insert(new PreferredActivity(ActivityConstants.VERBAL_TASK_EXERCISES));
end

// Preference - Recreational Group
rule "Prefer Activities for Recreational Group Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.RECREATIONAL_GROUP, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.PETANQUE_GAMES));
        insert(new PreferredActivity(ActivityConstants.BOWLING_GAMES));
        insert(new PreferredActivity(ActivityConstants.MIME_GAMES));
        insert(new PreferredActivity(ActivityConstants.BINGO_GAMES));
        insert(new PreferredActivity(ActivityConstants.ADAPTED_HANDKERCHIEF_GAMES));
        insert(new PreferredActivity(ActivityConstants.EXECUTION_FESTIVAL_WORK));
        insert(new PreferredActivity(ActivityConstants.CENTRE_DECORATION_WORK));
end

// Preference - Art
rule "Prefer Activities for Art Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.ART, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.PAINTINGS));
        insert(new PreferredActivity(ActivityConstants.CENTRE_DECORATION_WORK));
        insert(new PreferredActivity(ActivityConstants.FELT_WORK));
        insert(new PreferredActivity(ActivityConstants.SMALL_ARRANGEMENTS));
end

// Preference - Sports
rule "Prefer Activities for Sports Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.SPORTS, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.WALKING));
        insert(new PreferredActivity(ActivityConstants.PETANQUE_GAMES));
        insert(new PreferredActivity(ActivityConstants.BOWLING_GAMES));
end

// Preference - Cooking
rule "Prefer Activities for Cooking Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.COOKING, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.DESSERT_MAKING));
end

// Preference - Handicrafts
rule "Prefer Activities for Handicrafts Enthusiasts"
    agenda-group "survey-rules"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.HANDICRAFTS, AnswerConstants.YES))
    then
        insert(new PreferredActivity(ActivityConstants.CONSTRUCTION_TECHNIQUE));
        insert(new PreferredActivity(ActivityConstants.RECYCLED_MATERIALS));
        insert(new PreferredActivity(ActivityConstants.FELT_WORK));
        insert(new PreferredActivity(ActivityConstants.SMALL_ARRANGEMENTS));
        insert(new PreferredActivity(ActivityConstants.PAINTINGS));
        insert(new PreferredActivity(ActivityConstants.CENTRE_DECORATION_WORK));
        insert(new PreferredActivity(ActivityConstants.MANICURE));
        insert(new PreferredActivity(ActivityConstants.MAKEUP));
        insert(new PreferredActivity(ActivityConstants.MASSAGES));
end
