package pt.isep.meia.AICare;

import pt.isep.meia.AICare.application.utils.DroolsHelper;
import pt.isep.meia.AICare.domain.constants.AnswerConstants;
import pt.isep.meia.AICare.domain.constants.EvidenceConstants;
import pt.isep.meia.AICare.domain.entities.Question;
import pt.isep.meia.AICare.domain.model.Evidence;
import pt.isep.meia.AICare.domain.model.Hypothesis;
import pt.isep.meia.AICare.domain.model.SurveyCompleted;
import java.util.UUID;
import java.util.List;
import java.util.Arrays

global UUID surveyId;
global List<Evidence> evidences;

// Rule to start the survey by asking the first diagnosis question
rule "start_diagnosis"
    agenda-group "question-group"
    when
        eval(evidences == null || evidences.isEmpty())
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Rules for Diagnosis and Stages
rule "ask_alzheimer"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_ALZHEIMER);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_alzheimer_stage"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_ALZHEIMER_STAGE))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_ALZHEIMER_STAGE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.INITIAL, AnswerConstants.ADVANCED));
        insert(q);
        drools.halt();
end

rule "ask_parkinson"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_PARKINSON);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_parkinson_stage"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_PARKINSON_STAGE))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_PARKINSON_STAGE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.INITIAL, AnswerConstants.ADVANCED));
        insert(q);
        drools.halt();
end

rule "ask_vascular_dementia"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_vascular_dementia_stage"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA, AnswerConstants.YES))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA_STAGE))
    then
        Question q = new Question(surveyId, EvidenceConstants.DIAGNOSIS_VASCULAR_DEMENTIA_STAGE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.INITIAL, AnswerConstants.ADVANCED));
        insert(q);
        drools.halt();
end

// Rules for Observations
// Alzheimers-related questions
// Initial questions
rule "ask_observation_alzheimer_initial_disorientation"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_SPATIAL_DISORIENTATION))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_SPATIAL_DISORIENTATION);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_alzheimer_initial_memory_loss_frustration"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_MEMORY_LOSS_FRUSTRATION))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_MEMORY_LOSS_FRUSTRATION);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_alzheimer_initial_slight_memory_loss"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_SLIGHT_MEMORY_LOSS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_SLIGHT_MEMORY_LOSS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Advanced
rule "ask_observation_alzheimer_advanced_stare"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
        not Hypothesis(description == "disease", value == "alzheimer_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_STARE))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_STARE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_alzheimer_advanced_needs_constant_supervision"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
        not Hypothesis(description == "disease", value == "alzheimer_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_NEEDS_CONSTANT_SUPERVISION))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_NEEDS_CONSTANT_SUPERVISION);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_alzheimer_advanced_unable_to_follow_stimuli"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
        not Hypothesis(description == "disease", value == "alzheimer_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_UNABLE_TO_FOLLOW_STIMULI))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_UNABLE_TO_FOLLOW_STIMULI);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_alzheimer_advanced_history_of_falls"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "alzheimer_initial")
        not Hypothesis(description == "disease", value == "alzheimer_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_ALZHEIMER_HISTORY_OF_FALLS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_ALZHEIMER_HISTORY_OF_FALLS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Parkinsons-related questions
// Initial questions
rule "ask_observation_parkinsons_initial_shaking"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_SHAKING))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_SHAKING);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinsons_locomotion_difficulties"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_LOCOMOTION_DIFFICULTIES))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_LOCOMOTION_DIFFICULTIES);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinsons_bent_spine"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_BENT_SPINE))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_BENT_SPINE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinsons_balance_loss"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_BALANCE_LOSS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_BALANCE_LOSS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinsons_loss_onset"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_HEARING_LOSS_ONSET))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_HEARING_LOSS_ONSET);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Advanced
rule "ask_observation_parkinson_advanced_fine_motor_control"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "parkinson_initial")
        not Hypothesis(description == "disease", value == "parkinson_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_FINE_MOTOR_CONTROL))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_FINE_MOTOR_CONTROL);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinson_advanced_intense_tremors"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "parkinson_initial")
        not Hypothesis(description == "disease", value == "parkinson_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_INTENSE_TREMORS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_INTENSE_TREMORS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_parkinson_advanced_coordination_difficulties"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "parkinson_initial")
        not Hypothesis(description == "disease", value == "parkinson_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_PARKINSON_COORDINATION_DIFFICULTIES))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_PARKINSON_COORDINATION_DIFFICULTIES);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Vascular dementia-related questions
// Initial questions
rule "ask_observation_vascular_dementia_initial_slight_memory_loss"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_SLIGHT_MEMORY_LOSS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_SLIGHT_MEMORY_LOSS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_vascular_dementia_initial_depression_anxiety"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_DEPRESSION_ANXIETY))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_DEPRESSION_ANXIETY);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_vascular_dementia_initial_thinking_problems"
    agenda-group "question-group"
    when
        eval(DroolsHelper.checkQuestionAnswer(evidences, EvidenceConstants.DIAGNOSIS, AnswerConstants.NO))
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_THINKING_PROBLEMS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_THINKING_PROBLEMS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Advanced
rule "ask_observation_vascular_dementia_advanced_memory_recall_difficulties"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
        not Hypothesis(description == "disease", value == "vascular_dementia_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MEMORY_RECALL_DIFFICULTIES))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MEMORY_RECALL_DIFFICULTIES);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_vascular_dementia_advanced_memory_people_recognition"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
        not Hypothesis(description == "disease", value == "vascular_dementia_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_PEOPLE_RECOGNITION))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_PEOPLE_RECOGNITION);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_vascular_dementia_advanced_insomnia_agitation"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
        not Hypothesis(description == "disease", value == "vascular_dementia_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_AGGRESSIVENESS_INSOMNIA_AGITATION))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_AGGRESSIVENESS_INSOMNIA_AGITATION);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_observation_vascular_dementia_advanced_motor_problems"
    agenda-group "question-group"
    when
        Hypothesis(description == "disease", value == "vascular_dementia_initial")
        not Hypothesis(description == "disease", value == "vascular_dementia_advanced")
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MOTOR_PROBLEMS))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBSERVATION_VASCULAR_DEMENTIA_MOTOR_PROBLEMS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

// Rules for Conditions
rule "ask_condition_social_integration"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.SOCIAL_INTEGRATION))
    then
        Question q = new Question(surveyId, EvidenceConstants.SOCIAL_INTEGRATION);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.GOOD_SOCIAL_RELATIONS,
            AnswerConstants.SEVERE_INTEGRATION_ISSUES,
            AnswerConstants.ISOLATED_PERSON
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_vision"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.VISION))
    then
        Question q = new Question(surveyId, EvidenceConstants.VISION);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.GOOD_VISION,
            AnswerConstants.VISION_WITH_DIFFICULTIES,
            AnswerConstants.BLINDNESS
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_hearing"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.HEARING))
    then
        Question q = new Question(surveyId, EvidenceConstants.HEARING);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.GOOD_HEARING,
            AnswerConstants.HEARING_WITH_DIFFICULTIES,
            AnswerConstants.DEAFNESS
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_speech"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.SPEECH))
    then
        Question q = new Question(surveyId, EvidenceConstants.SPEECH);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.SPEAKS_NORMALLY,
            AnswerConstants.SPEAKS_WITH_DIFFICULTY,
            AnswerConstants.CANNOT_BE_UNDERSTOOD
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_smell"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.SMELL))
    then
        Question q = new Question(surveyId, EvidenceConstants.SMELL);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.SMELL_NORMALLY,
            AnswerConstants.SMELL_WITH_DIFFICULTY,
            AnswerConstants.NO_SENSE_OF_SMELL
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_upper_motor_skills"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.UPPER_MOTOR_SKILLS))
    then
        Question q = new Question(surveyId, EvidenceConstants.UPPER_MOTOR_SKILLS);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.UMS_FUNCTIONS_NORMALLY,
            AnswerConstants.UMS_HAS_DIFFICULTY,
            AnswerConstants.UNABLE_TO_USE_UPPER_LIMBS
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_lower_motor_skills"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.LOWER_MOTOR_SKILLS))
    then
        Question q = new Question(surveyId, EvidenceConstants.LOWER_MOTOR_SKILLS);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.LMS_FUNCTIONS_NORMALLY,
            AnswerConstants.LMS_HAS_DIFFICULTY,
            AnswerConstants.UNABLE_TO_USE_LOWER_LIMBS
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_object_handling"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.OBJECT_HANDLING))
    then
        Question q = new Question(surveyId, EvidenceConstants.OBJECT_HANDLING);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.FULL_CONTROL,
            AnswerConstants.PARTIAL_CONTROL,
            AnswerConstants.CANNOT_HANDLE
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_reading_condition"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.READING_CONDITION))
    then
        Question q = new Question(surveyId, EvidenceConstants.READING_CONDITION);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.READING_NORMALLY,
            AnswerConstants.READING_WITH_DIFFICULTY,
            AnswerConstants.CANNOT_READ
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_writing"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.WRITING))
    then
        Question q = new Question(surveyId, EvidenceConstants.WRITING);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.WRITES_NORMALLY,
            AnswerConstants.WRITES_WITH_DIFFICULTY,
            AnswerConstants.CANNOT_WRITE
        ));
        insert(q);
        drools.halt();
end

rule "ask_condition_mobility"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.MOBILITY))
    then
        Question q = new Question(surveyId, EvidenceConstants.MOBILITY);
        q.setPossibleAnswers(Arrays.asList(
            AnswerConstants.MOVES_EASILY,
            AnswerConstants.NEEDS_ASSISTANCE,
            AnswerConstants.TOTAL_DEPENDENCE
        ));
        insert(q);
        drools.halt();
end

// Rules for Preferences
rule "ask_preference_theatre"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.THEATRE))
    then
        Question q = new Question(surveyId, EvidenceConstants.THEATRE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_museum"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.MUSEUM))
    then
        Question q = new Question(surveyId, EvidenceConstants.MUSEUM);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_music"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.MUSIC))
    then
        Question q = new Question(surveyId, EvidenceConstants.MUSIC);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_reading"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.READING_PREFERENCE))
    then
        Question q = new Question(surveyId, EvidenceConstants.READING_PREFERENCE);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_recreational_group"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.RECREATIONAL_GROUP))
    then
        Question q = new Question(surveyId, EvidenceConstants.RECREATIONAL_GROUP);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_art"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.ART))
    then
        Question q = new Question(surveyId, EvidenceConstants.ART);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_sports"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.SPORTS))
    then
        Question q = new Question(surveyId, EvidenceConstants.SPORTS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_cooking"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.COOKING))
    then
        Question q = new Question(surveyId, EvidenceConstants.COOKING);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "ask_preference_handicrafts"
    agenda-group "question-group"
    when
        eval(!DroolsHelper.checkQuestionPresent(evidences, EvidenceConstants.HANDICRAFTS))
    then
        Question q = new Question(surveyId, EvidenceConstants.HANDICRAFTS);
        q.setPossibleAnswers(Arrays.asList(AnswerConstants.YES, AnswerConstants.NO));
        insert(q);
        drools.halt();
end

rule "Survey Completed"
    agenda-group "question-group"
    when
        not (Question())
    then
        insert(new SurveyCompleted());
end